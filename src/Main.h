//@@COPYRIGHT@@

// Unvanquished main header

// C standard library headers
#include <math.h>
#include <string.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <limits.h>
#include <float.h>
#include <errno.h>
#include <locale.h>
#include <setjmp.h>
#include <malloc.h>

// Platform headers
#ifdef _WIN32
#ifndef STRICT
#define STRICT 1
#endif
#ifndef NOMINMAX
#define NOMINMAX
#endif
#define NTDDI_VERSION NTDDI_VISTA
#include <windows.h>
#include <process.h>
#include <io.h>
#include <excpt.h>
#include <direct.h>
#include <shlobj.h>
#else
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <sys/ioctl.h>
#include <fcntl.h>
#include <dirent.h>
#include <signal.h>
#include <pthread.h>
#include <semaphore.h>
#endif

// C++ standard library headers
#include <new>
#include <memory>
#include <utility>
#include <initializer_list>
#include <tuple>
#include <algorithm>
#include <numeric>
#include <functional>
#include <iterator>
#include <thread>
#include <atomic>
#include <mutex>
#include <string>
#include <array>
#include <vector>
#include <list>
#include <forward_list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>

// Include std::bind placeholders in global namespace
using namespace std::placeholders;

// Boost headers
#include <boost/algorithm/clamp.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/circular_buffer.hpp>
#include <boost/current_function.hpp>
#include <boost/intrusive/slist.hpp>
#include <boost/intrusive/list.hpp>
#include <boost/intrusive/hashtable.hpp>
#include <boost/intrusive/rbtree.hpp>
#include <boost/optional.hpp>
#include <boost/spirit/include/karma.hpp>
#include <boost/spirit/include/qi.hpp>
#include <boost/utility.hpp>
#include <boost/variant.hpp>

// Shorter namespaces for boost stuff
namespace intrusive = boost::intrusive;
namespace spirit = boost::spirit;
namespace qi = boost::spirit::qi;
namespace karma = boost::spirit::karma;

// Tinyformat, show format string errors in debug mode
#ifdef DEBUG
void Warning(const std::string& msg);
#define TINYFORMAT_ERROR(msg) Warning(msg)
#else
#define TINYFORMAT_ERROR(msg) do {} while (false);
#endif
#define TINYFORMAT_USE_VARIADIC_TEMPLATES
#include <tinyformat/tinyformat.h>

// Union for bitwise conversions between ints and floats
union floatInt_t {
	float f;
	int32_t i;
};

// Use C++11 nullptr for NULL
#undef NULL
#define NULL nullptr

// Get an integer with a single bit set
#undef BIT
#define BIT(x) (1ULL << x)

// Tells the compiler that all possible values are already taken into account
// in a switch statement, so it doesn't need to handle a default case
#define NO_DEFAULT \
		break;\
	default: \
		AssertMsg(false, "Unhandled case"); \
		__unreachable(); \
		break;

// Macro to export engine symbols and import them in modules
#ifdef BUILD_MODULE
#define EXPORT __dllimport
#else
#define EXPORT __dllexport
#endif

// Configuration header (generated by Makefile)
#include <Config.h>

// Core headers
#include "Core/Platform.h"
#include "Core/Compiler.h"

#include "Core/Print.h"

#include "Core/Math/Math.h"
#include "Core/Math/Vector.h"
#include "Core/Math/VectorImpl.h"
#include "Core/Math/Matrix.h"
#include "Core/Math/Quat.h"
#include "Core/Math/Box.h"
#include "Core/Math/Plane.h"

#include "Core/Thread/Lock.h"
#include "Core/Thread/ThreadPool.h"
#include "Core/Thread/LockFree.h"

#include "Core/Filesystem/Filesystem.h"

/*
#include "Core/Memory/Memory.h"
#include "Core/Memory/Virtual.h"
#include "Core/Memory/Pool.h"
#include "Core/Memory/Arena.h"

#include "Core/Console.h"
#include "Core/Command.h"
#include "Core/Cvar.h"
#include "Core/Init.h"
#include "Core/Log.h"
#include "Core/Random.h"
#include "Core/System.h"
#include "Core/Terminal.h"

// Editor headers
#ifdef BUILD_EDITOR

#include <wx/wx.h>
#include <wx/aui/aui.h>
#include <wx/glcanvas.h>

#include "Editor/MainWindow.h"
#include "Editor/RenderCanvas.h"

#endif
*/

// Unit test headers
#ifdef BUILD_TEST

#include "Test/Test.h"

#endif
